#!/usr/bin/env bash
#
# Export macOS defaults that differ from system defaults
#
# This script helps identify custom macOS settings that should be
# added to your dotfiles or .macos script
#
# Usage:
#   ./export-macos-defaults.sh [output_file]
#
# If no output file is specified, results are printed to stdout

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Output file (optional)
OUTPUT_FILE="${1:-}"

# Temporary files
CURRENT_DEFAULTS="/tmp/current_defaults_$$.txt"
SYSTEM_DEFAULTS="/tmp/system_defaults_$$.txt"
DIFF_OUTPUT="/tmp/defaults_diff_$$.txt"

# Cleanup on exit
trap 'rm -f "$CURRENT_DEFAULTS" "$SYSTEM_DEFAULTS" "$DIFF_OUTPUT"' EXIT

echo -e "${BLUE}=== macOS Defaults Exporter ===${NC}"
echo -e "${YELLOW}Analyzing your macOS configuration...${NC}"
echo ""

# Function to export defaults for a domain
export_domain_defaults() {
    local domain="$1"
    local output_file="$2"

    if defaults read "$domain" &>/dev/null; then
        echo "# Domain: $domain" >> "$output_file"
        defaults read "$domain" >> "$output_file" 2>/dev/null || true
        echo "" >> "$output_file"
    fi
}

# Function to get all defaults domains
get_all_domains() {
    # Get user defaults domains
    defaults domains | tr ',' '\n' | sed 's/^ *//' | sort -u

    # Add common system domains
    echo "Apple Global Domain"
    echo "NSGlobalDomain"
}

# Export current defaults
echo -e "${GREEN}Step 1: Exporting current defaults...${NC}"
{
    echo "# Current macOS Defaults"
    echo "# Exported: $(date)"
    echo "# User: $(whoami)"
    echo "# macOS Version: $(sw_vers -productVersion)"
    echo ""
} > "$CURRENT_DEFAULTS"

# Export all domains
while IFS= read -r domain; do
    if [[ -n "$domain" ]]; then
        export_domain_defaults "$domain" "$CURRENT_DEFAULTS"
    fi
done < <(get_all_domains)

echo -e "${GREEN}✓ Current defaults exported${NC}"

# Create a script to convert defaults to commands
echo -e "${GREEN}Step 2: Generating defaults write commands...${NC}"

cat > "$DIFF_OUTPUT" << 'HEADER'
#!/usr/bin/env bash
#
# macOS Defaults Configuration
# Auto-generated by export-macos-defaults.sh
#
# This script contains all your custom macOS defaults settings
# Add this to your dotfiles or integrate into .macos script
#
# Usage: ./macos-defaults.sh

set -e

echo "Configuring macOS defaults..."

HEADER

# Important domains to check
IMPORTANT_DOMAINS=(
    "NSGlobalDomain"
    "Apple Global Domain"
    "com.apple.dock"
    "com.apple.finder"
    "com.apple.Safari"
    "com.apple.Terminal"
    "com.apple.TextEdit"
    "com.apple.screensaver"
    "com.apple.screencapture"
    "com.apple.ActivityMonitor"
    "com.apple.mail"
    "com.apple.SoftwareUpdate"
    "com.apple.TimeMachine"
    "com.apple.desktopservices"
    "com.apple.menuextra.battery"
    "com.apple.menuextra.clock"
    "com.apple.spaces"
    "com.apple.LaunchServices"
    "com.apple.loginwindow"
    "com.apple.systempreferences"
    "com.apple.universalaccess"
    "com.googlecode.iterm2"
    "com.sublimetext.3"
    "com.microsoft.VSCode"
)

# Function to safely read a default value
read_default() {
    local domain="$1"
    local key="$2"
    defaults read "$domain" "$key" 2>/dev/null || echo "NOT_SET"
}

# Function to determine the type of a value
get_value_type() {
    local value="$1"

    # Check if it's a boolean
    if [[ "$value" == "0" ]] || [[ "$value" == "1" ]]; then
        echo "-bool"
    # Check if it's a number
    elif [[ "$value" =~ ^-?[0-9]+$ ]]; then
        echo "-int"
    # Check if it's a float
    elif [[ "$value" =~ ^-?[0-9]+\.[0-9]+$ ]]; then
        echo "-float"
    # Check if it's an array
    elif [[ "$value" =~ ^\( ]]; then
        echo "-array"
    # Check if it's a dict
    elif [[ "$value" =~ ^\{ ]]; then
        echo "-dict"
    # Default to string
    else
        echo "-string"
    fi
}

# Export specific domains with their settings
echo -e "${GREEN}Step 3: Processing important domains...${NC}"

for domain in "${IMPORTANT_DOMAINS[@]}"; do
    echo "" >> "$DIFF_OUTPUT"
    echo "###############################################################################" >> "$DIFF_OUTPUT"
    echo "# ${domain}" >> "$DIFF_OUTPUT"
    echo "###############################################################################" >> "$DIFF_OUTPUT"
    echo "" >> "$DIFF_OUTPUT"

    if defaults read "$domain" &>/dev/null; then
        # Get all keys for this domain
        while IFS= read -r line; do
            # Skip empty lines and comments
            [[ -z "$line" ]] && continue
            [[ "$line" =~ ^[[:space:]]*# ]] && continue

            # Extract key = value pairs
            if [[ "$line" =~ ^[[:space:]]*([^[:space:]]+)[[:space:]]*=[[:space:]]*(.+);$ ]]; then
                key="${BASH_REMATCH[1]}"
                value="${BASH_REMATCH[2]}"

                # Clean up the value
                value="${value%;}"
                value="${value#\"}"
                value="${value%\"}"

                # Determine type
                value_type=$(get_value_type "$value")

                # Skip very long values (likely binary data or large configs)
                if [[ ${#value} -gt 200 ]]; then
                    echo "# Skipped $key (value too long)" >> "$DIFF_OUTPUT"
                    continue
                fi

                # Skip known problematic keys
                if [[ "$key" =~ (LastUsed|Recent|Cache|Session|State) ]]; then
                    continue
                fi

                # Write the defaults command
                if [[ "$value_type" == "-array" ]] || [[ "$value_type" == "-dict" ]]; then
                    echo "# defaults write $domain $key $value_type ..." >> "$DIFF_OUTPUT"
                    echo "# Note: Complex value - needs manual configuration" >> "$DIFF_OUTPUT"
                else
                    echo "defaults write $domain $key $value_type \"$value\"" >> "$DIFF_OUTPUT"
                fi
            fi
        done < <(defaults read "$domain" 2>/dev/null | grep -E "^[[:space:]]*[^[:space:]]+ =")

        echo -e "${GREEN}  ✓ $domain${NC}"
    else
        echo -e "${YELLOW}  ⊘ $domain (not found)${NC}"
    fi
done

# Add useful sections at the end
cat >> "$DIFF_OUTPUT" << 'FOOTER'

###############################################################################
# Manual Inspection Required
###############################################################################

# The following settings require manual inspection:
# 1. Binary/Data values (skipped above)
# 2. User-specific paths
# 3. Temporary/session data
# 4. Recently used items

# To inspect a specific domain:
# defaults read com.apple.finder

# To find all keys in a domain:
# defaults read com.apple.finder | grep "=" | awk '{print $1}'

# To read a specific key:
# defaults read com.apple.finder ShowPathbar

###############################################################################
# Recommended Next Steps
###############################################################################

# 1. Review this file and remove settings you don't want to persist
# 2. Test on a fresh user account or VM
# 3. Integrate into your .macos or dotfiles script
# 4. Add to version control

# Restart affected applications for changes to take effect:
# killall Dock
# killall Finder
# killall SystemUIServer

echo "Done! Restart affected applications for changes to take effect."
FOOTER

chmod +x "$DIFF_OUTPUT"

echo -e "${GREEN}✓ Defaults commands generated${NC}"
echo ""

# Summary
echo -e "${BLUE}=== Summary ===${NC}"
echo -e "Total domains checked: ${GREEN}${#IMPORTANT_DOMAINS[@]}${NC}"

# Count generated commands
COMMAND_COUNT=$(grep -c "^defaults write" "$DIFF_OUTPUT" || echo "0")
echo -e "Generated commands: ${GREEN}${COMMAND_COUNT}${NC}"

echo ""
echo -e "${YELLOW}Note: This script focuses on important/common domains.${NC}"
echo -e "${YELLOW}It may not capture all custom settings.${NC}"
echo ""

# Output or save
if [[ -n "$OUTPUT_FILE" ]]; then
    cp "$DIFF_OUTPUT" "$OUTPUT_FILE"
    chmod +x "$OUTPUT_FILE"
    echo -e "${GREEN}✓ Output saved to: ${OUTPUT_FILE}${NC}"
    echo ""
    echo -e "To review: ${BLUE}cat $OUTPUT_FILE${NC}"
    echo -e "To use: ${BLUE}./$OUTPUT_FILE${NC}"
else
    echo -e "${BLUE}=== Generated Script ===${NC}"
    echo ""
    cat "$DIFF_OUTPUT"
fi

echo ""
echo -e "${GREEN}=== Additional Tools ===${NC}"
echo ""
echo "To find specific changed settings:"
echo -e "  ${BLUE}defaults find <keyword>${NC}"
echo ""
echo "To compare with another Mac:"
echo -e "  ${BLUE}# On Mac 1:${NC}"
echo -e "  ${BLUE}defaults domains | tr ',' '\n' | sort > mac1-domains.txt${NC}"
echo -e "  ${BLUE}# On Mac 2:${NC}"
echo -e "  ${BLUE}defaults domains | tr ',' '\n' | sort > mac2-domains.txt${NC}"
echo -e "  ${BLUE}diff mac1-domains.txt mac2-domains.txt${NC}"
echo ""
echo "To monitor defaults changes in real-time:"
echo -e "  ${BLUE}watch -n 1 'defaults read com.apple.dock | grep -A 5 orientation'${NC}"
echo ""
echo -e "${GREEN}Done!${NC}"
